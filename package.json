{
	"name": "yamma",
	"description": "A language server example",
	"author": "Microsoft Corporation",
	"license": "MIT",
	"version": "0.0.1",
	"repository": {
		"type": "git",
		"url": "https://github.com/glacode/yamma.git"
	},
	"publisher": "glacode",
	"icon": "images/metamathlogo.png",
	"categories": [],
	"keywords": [
		"multi-root ready"
	],
	"engines": {
		"vscode": "^1.69.0"
	},
	"main": "./client/out/extension",
	"contributes": {
		"languages": [
			{
				"id": "yamma",
				"aliases": [
					"Yamma",
					"Metamath"
				],
				"extensions": [
					".mmp"
				],
				"configuration": "./language-configuration.json"
			}
		],
		"grammars": [
			{
				"language": "yamma",
				"scopeName": "source.mmp",
				"path": "./syntaxes/mmp.tmLanguage.json"
			}
		],
		"configuration": {
			"type": "object",
			"title": "Yamma",
			"properties": {
				"yamma.mmFileFullPath": {
					"scope": "resource",
					"type": "string",
					"default": "",
					"description": "The .mm file containing the main theory."
				},
				"yamma.kindConfigurations": {
					"scope": "resource",
					"type": "array",
					"items": {
						"type": "object",
						"title": "Variable kinds configuration",
						"properties": {
							"variablekind": {
								"type": "string",
								"description": "Variable kind"
							},
							"workingvarprefix": {
								"type": "string",
								"description": "Working var prefix"
							},
							"lspsemantictokentype": {
								"type": "string",
								"description": "LSP semantic token type"
							}
						}
					},
					"default": [
						{
							"variablekind": "wff",
							"workingvarprefix": "W",
							"lspsemantictokentype": "variable"
						},
						{
							"variablekind": "setvar",
							"workingvarprefix": "S",
							"lspsemantictokentype": "string"
						},
						{
							"variablekind": "class",
							"workingvarprefix": "C",
							"lspsemantictokentype": "keyword"
						}
					],
					"description": "Variable kinds configuration"
				},
				"yamma.proofMode": {
					"scope": "resource",
					"type": "string",
					"enum": [
						"normal",
						"compressed"
					],
					"default": "normal",
					"description": "Determines the format of the proof generated"
				},
				"yamma.maxNumberOfProblems": {
					"scope": "resource",
					"type": "number",
					"default": 100,
					"description": "Controls the maximum number of problems produced by the server."
				},
				"yamma.trace.server": {
					"scope": "window",
					"type": "string",
					"enum": [
						"off",
						"messages",
						"verbose"
					],
					"default": "off",
					"description": "Traces the communication between VS Code and the language server."
				}
			}
		},
		"commands": [
			{
				"command": "yamma.unify",
				"title": "Unify"
			},
			{
				"command": "yamma.unifyAndRenumber",
				"title": "Unify and Renumber"
			},
			{
				"command": "yamma.search",
				"title": "Search theorems in the theory"
			},
			{
				"command": "yamma.loadFromMMTfolder",
				"title": "Load Theorems from MMT Folder"
			},
			{
				"command": "yamma.storeInMMTfolder",
				"title": "Unify + Store in MMT Folder"
			}
		],
		"keybindings": [
			{
				"command": "yamma.unify",
				"key": "ctrl+u"
			},
			{
				"command": "yamma.unifyAndRenumber",
				"key": "ctrl+r"
			},
			{
				"command": "yamma.search",
				"key": "ctrl+h"
			}
		],
		"menus": {
			"editor/context": [
				{
					"when": "resourceLangId == yamma",
					"command": "yamma.unify",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == yamma",
					"command": "yamma.unifyAndRenumber",
					"group": "navigation"
				},				{
					"when": "resourceLangId == yamma",
					"command": "yamma.search",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == yamma",
					"command": "yamma.loadFromMMTfolder",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == yamma",
					"command": "yamma.storeInMMTfolder",
					"group": "navigation"
				}
			]
		}
	},
	"activationEvents": [
		"onLanguage"
	],
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -b",
		"watch": "tsc -b -w",
		"lint": "eslint ./client/src ./server/src --ext .ts,.tsx",
		"postinstall": "cd client && npm install && cd ../server && npm install && cd ..",
		"test": "npm test --prefix=server && npm run compile && node ./client/out/test/runTest.js"
	},
	"devDependencies": {
		"@types/node": "^12.12.0",
		"@typescript-eslint/eslint-plugin": "^4.23.0",
		"@typescript-eslint/parser": "^4.23.0",
		"eslint": "^7.26.0",
		"typescript": "^4.4.3"
	}
}