import { Range } from 'vscode-languageserver';
import { MmToken } from '../grammar/MmLexer';
import { InternalNode } from '../grammar/ParseNode';
import { rebuildOriginalStringFromTokens } from '../mm/Utils';

export interface IMmpStatement {
	toText(): string
}

export interface IMmpStatementWithRange extends IMmpStatement {
	range: Range
}

export class MmpComment implements IMmpStatement {
	/** comment tokens, exclued the startin '*' character */
	contentTokens: MmToken[]
	comment: string;

	constructor(contentTokens: MmToken[], comment: string) {
		this.contentTokens = contentTokens;
		this.comment = comment;
	}

	toText() {
		return this.comment;
	}
}

export type UProofStatementStep = {
	label: string,
	parseNode: InternalNode;
}

/**
 * a IUStatement that represents the text for a proof statement (generated by
 * the unification process); it has to be removed by a subsequent unification process
 */
export class TextForProofStatement implements IMmpStatement {
	statementTokens: MmToken[];
	constructor(statementTokens: MmToken[]) {
		this.statementTokens = statementTokens;
	}

	//#region toText
	toText(): string {
		const text = rebuildOriginalStringFromTokens(this.statementTokens);
		return text;
	}
	//#endregion toText
}

// export type UStatement = UTheoremLabel | UProofStep | UComment | DisjVarUStatement | UProofStatement | UCompressedProofStatement